package com.soft.util;


import java.sql.SQLException;
import java.util.Collection;
import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.orm.hibernate3.HibernateCallback;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;


public class BaseDAOImpl<T> extends HibernateDaoSupport implements BaseDAO<T>  {
	
	private static final Logger log = LoggerFactory.getLogger(BaseDAOImpl.class);
	private BaseDAOUtil baseDAOUtil =new BaseDAOUtil();
	
	protected void initDao() {
		// do nothing
	}
	// 增加=================================================================


	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#save(T)
	 */
	@Override
	public boolean save(T entity) {
		log.debug("saving "+entity+" instance");
		try {
			if ((Boolean) this.getHibernateTemplate().save(entity))
				{log.debug("save successful");
				return true;}
			else {return false;}
			
		} catch (RuntimeException re) {
			log.error("save failed", re);
			throw re;
		}
	}


	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#saveOrUpdate(T)
	 */
	@Override
	public void saveOrUpdate(T entity) {
		log.debug("attaching dirty "+entity+" instance");
		try {
			getHibernateTemplate().saveOrUpdate(entity);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}
	// 删除=================================================================

	
	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#delete(T)
	 */
	@Override
	public void delete(T entity) {
		log.debug("deleting "+entity+" instance");
		try {
			getHibernateTemplate().delete(entity);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}


	
	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#deleteByProperty(java.lang.String)
	 */
	@Override
	public boolean deleteByProperty(String hql) {

		Query query = this.getSession().createQuery(hql);

		if (query.executeUpdate() > 0)
			return true;
		return false;

	}

	// 更改=================================================================

	
	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#update(T)
	 */
	@Override
	public void update(T entity) {
		this.getHibernateTemplate().update(entity);
	}


	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#updateByProperty(java.lang.String)
	 */
	@Override
	public boolean updateByProperty( final String hql){
		Query query=this.getSession().createQuery(hql);
		if (query.executeUpdate() > 0)
			return true;
		return false;
	}


	
	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#findById(java.lang.String, java.lang.String)
	 */
	@Override
	public Object findById(String entity ,java.lang.String id) {
		log.debug("getting "+entity+" instance with id: " + id);
		try {
			Object instance = getHibernateTemplate().get(entity, id);
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	

	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#findByExample(T)
	 */
	@Override
	public List<T> findByExample(T entity) {
		log.debug("finding "+entity+" instance by example");
		try {
			List<T> results = getHibernateTemplate().findByExample(entity);
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}

	
	

	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#findAll(java.lang.Class)
	 */
	@Override
	public List<T> findAll(Class<?> classEntity) {
		log.debug("finding all "+classEntity.getName()+" instances");
		try {
			String queryString = "from "+classEntity.getName();
			return getHibernateTemplate().find(queryString);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}

	
	


	
	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#findEqualsPageSQL(java.lang.String, java.lang.Class, java.lang.Object, int, int)
	 */
	@Override
	public List<T> findEqualsPageSQL(String tableName, Class classFullName,
			Object object, int page, int pagesize) {

		String querySql = baseDAOUtil.bulidSqlWithCondition(tableName, classFullName,
				object, "equals");

		return this.findSQLPage(querySql, page, pagesize);

	}

	
	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#findLikePage(java.lang.String, java.lang.Class, java.lang.Object, int, int)
	 */
	@Override
	public List<T> findLikePage(String tableName, Class classFullName,
			Object object, int page, int pagesize) {

		String querySql = baseDAOUtil.bulidSqlWithCondition(tableName, classFullName,
				object, "like");

		return this.findSQLPage(querySql, page, pagesize);

	}
	
	
	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#findByPropertyLikePage(java.lang.Class, java.lang.String[], java.lang.Object[], int, int)
	 */
	@Override
	public List<T>findByPropertyLikePage(Class<?> classEntity,
			String[] propertyNames, Object[] values, int page, int pageSize){
String queryString=baseDAOUtil.buildQueryHQLLike(classEntity, propertyNames);
		

		int firstResult = (page - 1) * pageSize;

		Query query = this.getSession().createQuery(queryString);
		query.setFirstResult(firstResult);
		query.setMaxResults(pageSize);
		for (int i = 0; i < values.length; i++) {
			query.setParameter(i, values[i]);
		}

		return query.list();
	}

	
	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#findByProperty(java.lang.Class, java.lang.String, java.lang.Object)
	 */
	@Override
	public List<T> findByProperty(Class<?>classEntity, String propertyName, Object value) {
		log.debug("finding "+classEntity.getName()+" instance with property: " + propertyName
				+ ", value: " + value);
		try {
			String queryString = "from "+classEntity.getName()+" as model where model."
					+ propertyName + "= ?";
			return getHibernateTemplate().find(queryString, value);
		} catch (RuntimeException re) {
			log.error("find by property name failed", re);
			throw re;
		}
	}
	
	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#findByPropertys(java.lang.Class, java.lang.String[], java.lang.Object[])
	 */
	@Override
	public List<T> findByPropertys(Class<?> classEntity, String[] propertyNames,
			Object[] values) {
		String queryString=baseDAOUtil.buildQueryHQL(classEntity, propertyNames);

		return this.getHibernateTemplate().find(queryString, values);
	}
	
	
	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#findByPropertysPage(java.lang.Class, java.lang.String[], java.lang.Object[], int, int)
	 */
	@Override
	public List<T> findByPropertysPage(Class<?> classEntity,
			String[] propertyNames, Object[] values, int page, int pageSize) {
		String queryString=baseDAOUtil.buildQueryHQL(classEntity, propertyNames);
		

		int firstResult = (page - 1) * pageSize;

		Query query = this.getSession().createQuery(queryString);
		query.setFirstResult(firstResult);
		query.setMaxResults(pageSize);
		for (int i = 0; i < values.length; i++) {
			query.setParameter(i, values[i]);
		}

		return query.list();
	}

	

	

	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#findByPropertyPage(java.lang.Class, java.lang.String, java.lang.Object, int, int)
	 */
	@Override
	public List<T> findByPropertyPage(Class<?> classEntity, String propertyName,
			Object value, int page, int pageSize) {
		return this.findByPropertysPage(

				classEntity, new String[] { propertyName }, new Object[] { value }, page,
				pageSize);
	}




	// 外传HQL/SQL查询=================================================================


	


	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#findPage(java.lang.String, int, int)
	 */
	@Override
	public List<T> findPage(String hql, int page, int pageSize) {

		Query query = this.getSession().createQuery(hql);
		int firstResult = (page - 1) * pageSize;
		query.setFirstResult(firstResult);
		query.setMaxResults(pageSize);
		return query.list();
	}


	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#find(java.lang.String)
	 */
	@Override
	public List<T> find(String hql) {

		Query query = this.getSession().createQuery(hql);

		return query.list();
	}
	

	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#findSQL(java.lang.String)
	 */
	@Override
	public List<T> findSQL(final String sql) {

		Query query = this.getSession().createSQLQuery(sql);

		return query.list();
	}
	

	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#findSQLPage(java.lang.String, int, int)
	 */
	@Override
	public List<T> findSQLPage(final String sql,int page, int pageSize) {

		Query query = this.getSession().createSQLQuery(sql);
		int firstResult = (page - 1) * pageSize;
		query.setFirstResult(firstResult);
		query.setMaxResults(pageSize);
		return query.list();
	}
	
	
	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#findPage(java.lang.String, java.lang.Object[], int, int)
	 */
	@Override
	public List<T> findPage(String hql,final Object[] values, int page, int pageSize) {

		Query query = this.getSession().createQuery(hql);
		int firstResult = (page - 1) * pageSize;
		for (int i = 0; i < values.length; i++) {
			query.setParameter(i, values[i]);
		}
		query.setFirstResult(firstResult);
		query.setMaxResults(pageSize);
		
		return query.list();
	}

	
	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#find(java.lang.String, java.lang.Object[])
	 */
	@Override
	public List<T> find(String hql,final Object[] values) {

		Query query = this.getSession().createQuery(hql);
		for (int i = 0; i < values.length; i++) {
			query.setParameter(i, values[i]);
		}
		return query.list();
	}
	

	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#findSQL(java.lang.String, java.lang.Object[])
	 */
	@Override
	public List<T> findSQL(final String sql,final Object[] values) {

		Query query = this.getSession().createSQLQuery(sql);
		for (int i = 0; i < values.length; i++) {
			query.setParameter(i, values[i]);
		}
		return query.list();
	}
	

	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#findSQLPage(java.lang.String, java.lang.Object[], int, int)
	 */
	@Override
	public List<T> findSQLPage(final String sql,final Object[] values,int page, int pageSize) {

		Query query = this.getSession().createSQLQuery(sql);
		for (int i = 0; i < values.length; i++) {
			query.setParameter(i, values[i]);
		}
		int firstResult = (page - 1) * pageSize;
		query.setFirstResult(firstResult);
		query.setMaxResults(pageSize);
		return query.list();
	}



	
	
	

	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#countAll(java.lang.Class)
	 */
	@Override
	public int countAll(Class<?> classEntity) {
		String queryString = "select count(*) from " + classEntity.getName();
		Query query = this.getSession().createQuery(queryString);
		List list = query.list();
		Long result = (Long) list.get(0);
		return result.intValue();
	}


	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#countByProperty(java.lang.Class, java.lang.String, java.lang.Object)
	 */
	@Override
	public int countByProperty(Class<?> classEntity, String propertyName,
			Object value) {
		String[] propertyNames = new String[] { propertyName };
		Object[] values = new Object[] { value };
		return this.countByPropertys(classEntity, propertyNames, values);
	}


	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#countByPropertys(java.lang.Class, java.lang.String[], java.lang.Object[])
	 */
	@Override
	public int countByPropertys(Class<?> classEntity, String[] propertyNames,
			Object[] values) {
		String queryString=baseDAOUtil.buildQueryHQL(classEntity, propertyNames);
		
		Query query = this.getSession().createQuery(queryString);
		for (int i = 0; i < values.length; i++) {
			query.setParameter(i, values[i]);
		}

		List list = query.list();
		Long result = (Long) list.get(0);
		return result.intValue();
	}
    

	/* (non-Javadoc)
	 * @see com.soft.util.BaseDAO#countByPropertysLike(java.lang.Class, java.lang.String[], java.lang.Object[])
	 */
	@Override
	public int countByPropertysLike(Class<?> classEntity, String[] propertyNames,
		Object[] values) {
		String queryString=baseDAOUtil.buildQueryHQLLike(classEntity, propertyNames);
		
		Query query = this.getSession().createQuery(queryString);
		for (int i = 0; i < values.length; i++) {
			query.setParameter(i, values[i]);
		}

		List list = query.list();
		Long result = (Long) list.get(0);
		return result.intValue();
	}

	
}
